class FiniteStateMachine:
    def __init__(self):
        self.states = {'q0', 'q1', 'q2'} 
        self.alphabet = {'a', 'b'}        
        self.transitions = {               
            ('q0', 'a'): 'q1',
            ('q0', 'b'): 'q0',
            ('q1', 'a'): 'q1',
            ('q1', 'b'): 'q2',
            ('q2', 'a'): 'q1',
            ('q2', 'b'): 'q0',
        }
        self.start_state = 'q0'            
        self.accept_states = {'q2'}

    def is_accepted(self, string):
        current_state = self.start_state
        for symbol in string:
            if symbol not in self.alphabet:
                return False
            current_state = self.transitions.get((current_state, symbol), None)
            if current_state is None:
                return False
        return current_state in self.accept_states



automaton = FiniteStateMachine()

test_strings = ['aab', 'ab', 'abb', 'baab', 'b', 'abab']
for string in test_strings:
    if automaton.is_accepted(string):
        print(f"'{string}' is accepted")
    else:
        print(f"'{string}' is rejected")
