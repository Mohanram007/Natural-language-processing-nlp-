class ParseTree:
    def __init__(self, label, children=None):
        self.label = label
        self.children = children or []

    def __str__(self, level=0):
        result = "\t" * level + self.label + "\n"
        for child in self.children:
            result += child.__str__(level + 1)
        return result

def generate_parse_tree(grammar, sentence):
    chart = [[] for _ in range(len(sentence) + 1)]

    for i in range(len(sentence) + 1):
        for production in grammar["S"]:
            chart[i].append({"production": production, "dot": 0, "start": i, "end": i})

    for i in range(len(sentence) + 1):
        while True:
            added = False
            for state in chart[i][:]:
                if state["dot"] < len(state["production"]):
                    next_symbol = state["production"][state["dot"]]
                    if next_symbol in grammar:
                        for new_production in grammar[next_symbol]:
                            new_state = {"production": new_production, "dot": 0, "start": state["start"],
                                         "end": state["start"]}
                            chart[i].append(new_state)
                        added = True

            if not added:
                break

        for j in range(len(sentence) + 1):
            for state in chart[j][:]:
                if state["dot"] < len(state["production"]) and state["production"][state["dot"]] == sentence[i - 1]:
                    new_state = {"production": state["production"], "dot": state["dot"] + 1, "start": state["start"],
                                 "end": i}
                    chart[i].append(new_state)

            while True:
                added = False
                for state in chart[i][:]:
                    if state["dot"] == len(state["production"]):
                        for st in chart[state["start"]][:]:
                            next_symbol = st["production"][st["dot"]]
                            if next_symbol == state["production"][state["dot"]] and st["end"] == i:
                                new_state = {"production": st["production"], "dot": st["dot"] + 1,
                                             "start": st["start"], "end": state["end"]}
                                chart[i].append(new_state)
                                added = True

                if not added:
                    break

    for state in chart[-1]:
        if state["production"] == ["S"] and state["dot"] == 1 and state["start"] == 0:
            return build_parse_tree(state, chart, sentence)

    return None

def build_parse_tree(state, chart, sentence):
    label = state["production"][0]
    children = []

    for i, symbol in enumerate(state["production"][1:]):
        child_state = chart[state["start"]][0]  # We assume unique completions
        if child_state["dot"] == len(child_state["production"]):
            child_state = next(
                s for s in chart[state["start"]] if s["production"] == [symbol] and s["dot"] == 1)
        children.append(build_parse_tree(child_state, chart, sentence))

    return ParseTree(label, children)

# Example usage:
grammar = {
    "S": [["NP", "VP"]],
    "NP": [["Det", "N"], ["Det", "N", "PP"]],
    "VP": [["V", "NP"], ["VP", "PP"]],
    "PP": [["P", "NP"]],
    "Det": [["the"], ["a"]],
    "N": [["cat"], ["dog"], ["house"]],
    "V": [["chased"], ["caught"]],
    "P": [["in"], ["on"]]
}

sentence = ["the", "cat", "chased", "a", "dog", "in", "the", "house"]

parse_tree = generate_parse_tree(grammar, sentence)

if parse_tree:
    print(parse_tree)
else:
    print("Parsing failed!")
